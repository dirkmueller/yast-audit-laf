/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/audit-laf/wizards.ycp
 * Package:	Configuration of Linux Auditing
 * Summary:	Wizards definitions
 * Authors:	Gabriele Mohr <gs@suse.de>
 *
 */

{

textdomain "audit-laf";

import "Sequencer";
import "Wizard";
import "CWM";
import "CWMTab";

include "audit-laf/complex.ycp";
include "audit-laf/dialogs.ycp";


/**
 * Main workflow of the LAF Auditing configuration
 * @return sequence result
 */
any MainSequence() {
    map <string, map <string, any> > widgets = $[
	"log" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["logfile_settings"]:"",
	    "custom_widget"	: LogfileSettingsDialogContent(),
	    "handle"		: HandleLogfileSettingsDialog,
	    "init"		: InitLogfileSettingsDialog,
	    "store"		: StoreLogfileSettingsDialog,
	],
	"disp" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["dispatcher"]:"",
	    "custom_widget"	: DispatcherDialogContent(),
	    "handle"		: HandleDispatcherDialog,
	    "init"		: InitDispatcherDialog,
	    "store"		: StoreDispatcherDialog,
	],
	"disk" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["diskspace_settings"]:"",
	    "custom_widget"	: DiskspaceSettingsDialogContent(),
	    "init"		: InitDiskspaceSettingsDialog,
	    "store"		: StoreDiskspaceSettingsDialog,
	],
	"rules" : $[
	    "widget"		: `custom,
	    "help"		: HELPS["audit_rules"]:"",
	    "custom_widget"	: RulesDialogContent(),
	    "handle"		: HandleRulesDialog,
	    "init"		: InitRulesDialog,
	    "store"		: StoreRulesDialog,
	],
    ];

    map <string, any> tabs = $[
	"logfile_settings" : $[
	    // Header of tab in tab widget
	    "header" : _("&Log File"),
	    "widget_names" : ["log"],
	    "contents" : LogfileSettingsDialogContent(),
	],
	"dispatcher" : $[
	    // Header of tab in tab widget		 
	    "header" : _("&Dispatcher"),
	    "widget_names" : ["disp"],
	    "contents" : DispatcherDialogContent(),
	],
	"diskspace_settings" : $[
	    // Header of tab in tab widget		 
	    "header" : _("Disk &Space"),
	    "widget_names" : ["disk"],
	    "contents" : DiskspaceSettingsDialogContent(),
	],
	"audit_rules" : $[
	    // Header of tab in tab widget
            // (auditctl is a program which sends the rules to the audit subsystem)
	    "header" : _("&Rules for 'auditctl'"),
	    "widget_names" : ["rules"],
	    "contents" : RulesDialogContent(),
	],
    ];

    string ini_tab = "";
    
    if ( AuditLaf::RulesLocked() )
	ini_tab = "audit_rules";
    else
	ini_tab = "logfile_settings";
    
    map <string, any> wd = $[
	"tab" : CWMTab::CreateWidget ($[
	    "tab_order" : ["logfile_settings", "dispatcher", "diskspace_settings", "audit_rules"],
	    "tabs" : tabs,
	    "widget_descr" : widgets,
	    "initial_tab" : ini_tab,
	])
    ];

    term contents = `VBox("tab");

    list <map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >) wd);

    // Initialization dialog caption
    string caption = _("Configuration of Linux Audit Framework (LAF)");
    contents = CWM::PrepareDialog (contents, w);

    Wizard::SetContentsButtons (
	caption,
	contents,
	"",
	Label::BackButton (),
	Label::FinishButton()
    );
    Wizard::DisableBackButton ();
    Wizard::SetTitleIcon("yast-audit-laf");

    return CWM::Run (w, $[`abort : ReallyExit]);
}

/**
 * Whole configuration of LAF Auditing
 * @return sequence result
 */
any AuditLafSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"check" :   ``( CheckSettings() ),
	"reset" :   ``( Reset() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: "reset",
	    `next	: "check"
	],
	"check" : $[
		    `abort: `abort,
		    `next: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of LAF Auditing but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any AuditLafAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("Configuration of Linux Audit Framework (LAF)");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
